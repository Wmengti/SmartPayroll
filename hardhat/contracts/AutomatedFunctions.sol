// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import {Functions, FunctionsClient} from "./dev/functions/FunctionsClient.sol";
// import "@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol"; // Once published
import {ConfirmedOwner} from "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol";
import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";

contract AutomatedFunctions is FunctionsClient, ConfirmedOwner, AutomationCompatibleInterface {
  using Functions for Functions.Request;

  bytes public requestCBOR;
  bytes32 public latestRequestId;
  bytes public latestResponse;
  bytes public latestError;
  uint64 public subscriptionId;
  uint32 public fulfillGasLimit;
  uint256 public lastUpkeepTimeStamp;
  uint256 public responseCounter;

  uint public counter;
  uint public interval;
  uint public lastTimeStamp;

  event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);

  constructor(
    address oracle,
    uint64 _subscriptionId,
    uint32 _fulfillGasLimit,
    uint updateInterval
  ) FunctionsClient(oracle) ConfirmedOwner(msg.sender) {
    interval = updateInterval;
    subscriptionId = _subscriptionId;
    fulfillGasLimit = _fulfillGasLimit;
    lastTimeStamp = block.timestamp;

    counter = 0;
  }

  // function generateRequest(
  //   string calldata source,
  //   bytes calldata secrets,
  //   string[] calldata args
  // ) public pure returns (bytes memory) {
  //   Functions.Request memory req;
  //   req.initializeRequest(Functions.Location.Inline, Functions.CodeLanguage.JavaScript, source);
  //   if (secrets.length > 0) {
  //     req.addRemoteSecrets(secrets);
  //   }
  //   if (args.length > 0) req.addArgs(args);

  //   return req.encodeCBOR();
  // }

  // function setRequest(
  //   bytes calldata newRequestCBOR
  // ) external {
  //   requestCBOR = newRequestCBOR;
  // }

  function checkUpkeep(
    bytes calldata /* checkData */
  ) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
    upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
    // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
  }

  function performUpkeep(bytes calldata /* performData */) external override {
    //We highly recommend revalidating the upkeep in the performUpkeep function
    if ((block.timestamp - lastTimeStamp) > interval) {
      lastTimeStamp = block.timestamp;
      counter = counter + 1;
      // bytes32 requestId = s_oracle.sendRequest(subscriptionId, requestCBOR, fulfillGasLimit);

      // s_pendingRequests[requestId] = s_oracle.getRegistry();
      // emit RequestSent(requestId);
      // latestRequestId = requestId;
    }
    // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
  }

  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal override {
    latestResponse = response;
    latestError = err;
    responseCounter = responseCounter + 1;
    emit OCRResponse(requestId, response, err);
  }

  function updateOracleAddress(address oracle) public onlyOwner {
    setOracle(oracle);
  }
}
